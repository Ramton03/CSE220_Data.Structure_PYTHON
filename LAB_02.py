# -*- coding: utf-8 -*-
"""22201779_Sharan Mistry_LAB02_CSE220.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MB3Javr_gI25SBBHSVS905sg9OmfjaOk
"""

# You must run this cell to install dependency
! pip3 install fhm-unittest
! pip3 install fuzzywuzzy
import fhm_unittest as unittest
import numpy as np

#You must run this cell to print matrix and for the driver code to work
def print_matrix(m):
    row,col = m.shape
    for i in range(row):
        c = 1
        print('|', end='')
        for j in range(col):
            c += 1
            if(len(str(m[i][j])) == 1):
                print(' ',m[i][j], end = '  |')
                c += 6
            else:
                print(' ',m[i][j], end = ' |')
                c += 6
        print()
        print('-'*(c-col))

"""Task 1: Zigzag Walk"""

def walk_zigzag(floor):
    row_val, col_val = np.shape(floor)
    for col in range(col_val):
        for row in range(row_val):
            if col % 2 == 0: #for even index only print odd index from column
                if row % 2 == 0:
                    print(floor[row][col], end=" ")
            else:
                if row_val % 2 == 1: #for odd index columns
                    if row % 2 == 1:
                        print(floor[row_val-row-1][col], end=" ")
                else:
                    if row % 2 == 0:
                        print(floor[row_val-row-1][col], end=" ")

        print() # prints a new line



floor = np.array([[ '3' , '8' , '4' , '6' , '1'],
                  ['7' , '2' , '1' , '9' , '3'],
                  ['9' , '0' , '7' , '5' , '8'],
                  ['2' , '1' , '3' , '4' , '0'],
                  ['1' , '4' , '2' , '8' , '6']]
                )



print_matrix(floor)
print('Walking Sequence:')
walk_zigzag(floor)
#This should print
# 3 9 1
# 1 2
# 4 7 2
# 4 9
# 1 8 6
print('################')
floor = np.array([[ '3' , '8' , '4' , '6' , '1'],
                  ['7' , '2' , '1' , '9' , '3'],
                  ['9' , '0' , '7' , '5' , '8'],
                  ['2' , '1' , '3' , '4' , '0']]
                )

print_matrix(floor)
print('Walking Sequence:')
walk_zigzag(floor)
#This should print
# 3 9
# 1 2
# 4 7
# 4 9
# 1 8

"""Task 2: Row Rotation Policy of BRACU Classroom"""

def row_rotation(seat_status, exam_week):
    rowval, colval = np.shape(seat_status)
    last_arr = np.array([None] * colval)
    limit = 0
    while limit < exam_week:
        # Store the last row
        for val in range(colval):
            last_arr[val] = seat_status[-1][val]
        # Move rows down
        rows = rowval - 2
        while rows >= 0:
            for values in range(colval):
                seat_status[rows + 1][values] = seat_status[rows][values]
            rows -= 1
        # Move the last row to the top
        for val in range(colval):
            seat_status[0][val] = last_arr[val]
        limit += 1
    return limit


seat_status = np.array(
    [
        ["A", "B", "C", "D", "E"],
        ["F", "G", "H", "I", "J"],
        ["K", "L", "M", "N", "O"],
        ["P", "Q", "R", "S", "T"],
        ["U", "V", "W", "X", "Y"],
        ["Z", "AA", "BB", "CC", "DD"],
    ]
)

exam_week = 3
print_matrix(seat_status)
print()
row_number = row_rotation(seat_status, exam_week)
print_matrix(seat_status)
print(f"Your friend AA will be on row {row_number}")

"""Task 3: Matrix Manipulation"""

def reverse_Matrix(matrix):
    len_mat = len(matrix)
    reversed_matrix = np.zeros(
        (np.shape(matrix)[0], np.shape(matrix)[1]), dtype=int
    )  # Create a new matrix of the same size

    for row in range(len_mat):
        for column in range(len_mat):
            reversed_matrix[row][column] = matrix[len_mat - 1 - row][
                len_mat - 1 - column
            ]  # Reverse rows and columns

    return reversed_matrix


matrix = np.array([
[14,  8,  0,  4],
[9,  8,  13,  13],
[9,  3,  1,  4],
[2,  10,  13,  6]
])
print_matrix(matrix)
print('################')
print()
reversed_matrix = reverse_Matrix(matrix)
print_matrix(reversed_matrix)

#This should print
#|  6  |  13 |  10 |  2  |
#-------------------------
#|  4  |  1  |  3  |  9  |
#-------------------------
#|  13  |  13  |  8 |  9 |
#-------------------------
#|  4 |  0  |  8  |  14  |
#-------------------------

"""Task 4: Chess Piece"""

def left_up(x, y):
    return x - 1, y - 2


def left_down(x, y):
    return x + 1, y - 2


def right_up(x, y):
    return x - 1, y + 2


def right_down(x, y):
    return x + 1, y + 2


def up_left(x, y):
    return x - 2, y - 1


def up_right(x, y):
    return x - 2, y + 1


def down_left(x, y):
    return x + 2, y - 1


def down_right(x, y):
    return x + 2, y + 1


def show_knight_move(knight):
    chess_board = np.zeros((8, 8), dtype=int)
    x, y = knight

    possible_moves = np.array([
        left_up(x, y),
        left_down(x, y),
        right_up(x, y),
        right_down(x, y),
        up_left(x, y),
        up_right(x, y),
        down_left(x, y),
        down_right(x, y),
    ])

    for move in possible_moves:
        x, y = move
        if 0 <= x < 8 and 0 <= y < 8:
            chess_board[x][y] = 3

    chess_board[knight[0]][knight[1]] = 66
    return chess_board


knight = (3, 4)
chess_board = show_knight_move(knight)
print_matrix(chess_board)
#This Should print
#| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
#------------------------------------------
#| 0 | 0 | 0 | 3 | 0 | 3 | 0 | 0 |
#------------------------------------------
#| 0 | 0 | 3 | 0 | 0 | 0 | 3 | 0 |
#------------------------------------------
#| 0 | 0 | 0 | 0 | 66 | 0 | 0 | 0 |
#------------------------------------------
#| 0 | 0 | 3 | 0 | 0 | 0 | 3 | 0 |
#------------------------------------------
#| 0 | 0 | 0 | 3 | 0 | 3 | 0 | 0 |
#------------------------------------------
#| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
#------------------------------------------
#| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
#-----------------------------------------

"""Task 5: Matrix Compression"""

def compress_matrix(mat):
    result = np.zeros((len(mat) // 2, len(mat[0]) // 2), dtype=int)
    for row in range(0, len(mat), 2):
        for column in range(0, len(mat[0]), 2):
            right_sum = mat[row][column] + mat[row][column + 1]
            left_sum = mat[row+1][column] + mat[row + 1][column+1]
            row_index = row // 2
            col_index = column // 2
            result[row_index][col_index] = right_sum + left_sum
    return result
matrix=np.array([[1,2,3,4],
                 [5,6,7,8],
                 [1,3,5,2],
                 [-2,0,6,-3]
                 ])
print_matrix(matrix)
print('################')
print()
returned_array=compress_matrix(matrix)
print_matrix(returned_array)
#This should print
#|  14  |  22 |
#--------------
#|  2  |  10  |
#--------------

"""Task 6: Game Arena"""

def play_game(arena):
    row_val, column_val = np.shape(arena)
    row_val = row_val
    column_val = column_val
    count = 0
    for row in range(row_val):
        for column in range(column_val):
            if arena[row][column] % 50 == 0 and arena[row][column] >= 50:
                count += top(arena, row, column, row_val)
                count += right(arena, row, column, column_val)
                count += bottom(arena, row, column, row_val)
                count += left(arena, row, column, column_val)
    count *= 2
    if count < 10:
        print(f"Points Gained: {count}. Your team is out.")
    else:
        print(f"Points Gained: {count}. Your team has survived the game.")


def top(arena, row, column, row_val):
    if row_val - 1 >= row - 1 >= 0:
        val = arena[row - 1][column]
        if val == 2:
            return 1
    return 0


def right(arena, row, column, column_val):
    if 0 <= column + 1 <= column_val -1:
        val = arena[row][column + 1]
        if val == 2:
            return 1
    return 0


def bottom(arena, row, column, row_val):
    if 0 <= row + 1 <= row_val -1 :
        val = arena[row + 1][column]
        if val == 2:
            return 1
    return 0


def left(arena, row, column, column_val):
    if column_val -1 >= column - 1 >= 0:
        val = arena[row][column - 1]
        if val == 2:
            return 1
    return 0

arena=np.array([[0,2,2,0],
                [50,1,2,0],
                [2,2,2,0],
                [1,100,2,0]
                ])
print_matrix(arena)
play_game(arena)
#This should print
#Points Gained: 6. Your team is out.

print(".....................")
arena=np.array([[0,2,2,0,2],
                [1,50,2,1,100],
                [2,2,2,0,2],
                [0,200,2,0,0]
                ])
print_matrix(arena)
play_game(arena)
#This should print
#Points Gained: 14. Your team has survived the game.

"""Bonus Task: Primary vs Secondary Diagonal"""

def check_diagonal(matrix1, matrix2):
  #TO DO

array1 = np.array([[0, 4, 1], [7, 2, 5], [3, 6, 0]])
array2 = np.array([[3, 6, 0], [5, 2, 7], [0, 4, 1]])

check_Diagonal(array1, array2) #This should print YES
print(".............")
array1 = np.array([[0, 9, 9, 1], [9, 0, 2, 9], [9, 3, 0, 9], [4, 9, 9, 0]])
array2 = np.array([[4, 9, 9, 0], [9, 0, 3, 9], [9, 0, 2, 9], [0, 9, 5, 1]])

check_Diagonal (array1, array2) #This should print NO